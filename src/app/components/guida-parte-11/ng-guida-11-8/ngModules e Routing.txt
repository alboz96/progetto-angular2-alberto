1) UTILITA' E USI DI NGMODULES
- @NgModule serve a suddividere l'applicazione in blocchi di funzionalita'
- @NgModule prende come metadati un oggetto che dice ad Angular come compilare ed eseguire un modulo.
- Identifica i components, directives, and pipes del modulo
  rendendo alcuni di essi public cosi che i componenti esterni possano farne uso. 
  @NgModule può aggiungere service providers ai dependency injectors dell'applicazione.
- I moduli possono essere caricati eagerly (da subito) quando l'applicazione starta. 
- I moduli possono essere caricati in modo lazy (quando ce n'è bisogno) in maniera asincrona tramite il router.

I metadati di @NgModule fanno le seguenti cose:
- Dichiarare quali components, directives, and pipes appartengono al module.
- Rendere alcune di queste classi pubbliche così i template degli altri componenti possono usarle.
- Importa altri moduli con i components, directives, and pipes di cui hanno bisogno i components in questo module.
- Fornisce servizi a livello di applicazione così che ogni componente possa usarli.

Ogni applicazione ha un RootModule caricato nella fase di bootstrap dell'applicazione (specificato nel file main.ts)
Quando l'applicazione cresce conviene rifattorizzarla in più moduli

- Il modulo BrowserModule DEVE essere sempre importato per le applicazioni web su browser per permettere il bootstrap dell'applicazione su browser
  Inoltre contiene direttive importanti come *ngIf *ngFor

QUINDI IMPORTANDO UN MODULO COME AD ESEMPIO BrowserModule,
BrowserModule rendera' tutti i suoi components, directives, and pipes che sono PUBBLICI,
visibili ai templates dei componenti in AppModule.

IMPORTANTE:
Per essere accurati, *ngIf e' dichiarato nel CommonModule da @angular/common.
CommonModule contribuisce ad importare le common directives di cui l'applicazione ha bisogno, anche *ngIf e *ngFor.
BrowserModule importa (import) il CommonModule e lo re-esporta (export). 
L'effetto rete comporta che un modulo che importa al suo interno BrowserModule ottiene automaticamente le direttive del modulo CommonModule.
Molte direttive usate in Angular non appartengono al CommonModule. 
Per esempio, NgModel e RouterLink appartengono ai moduli FormsModule e RouterModule. 
Per usare quelle direttive devi importare quei moduli.

2) COMPILAZIONE DEL NGMODULE NELLA FASE DI BOOTSTRAP 
Entrambi i compilatori JIT (just-in-time) e AOT (ahead-of-time) generano una classe AppModuleNgFactory (AppModule precompilato), quindi dallo stesso AppModule nel codice sorgente. 
Il compilatore JIT crea quella classe factory sul momento (on the fly), in memoria, nel browser. 
Il compilatore AOT genera in output la factory su un file fisico che è importato qui nella versione statica del main.ts.
In genere, l'AppModule non dovrebbe sapere o importarsene come viene bootstrapped.
Nonostante l'AppModule cresca, il codice per il bootstrap nel main.ts non cambierà MAI. 

3)ATTENZIONE SULL'IMPORT DEI MODULI o DIRETTIVE,COMPONENTI,PIPE APPARTENENTI AD ALTRI MODULI:
Non aggiungere NgModel oppure FORMS_DIRECTIVES all'array declarations di AppModule. 
Queste directives appartengono al FormsModule, quindi importo nell'array declarations solo FormsModule.
Components, directives, e pipes appartengono ad un solo Modulo.
MAI RIDICHIARARE classi che appartengono ad un Modulo gia' importato.

4) RISOLVERE CONFLITTI CON DIRETTIVE CHE HANNO LO STESSO NOME:
Se devo dichiarare 2 direttive con lo stesso nome nell'array declarations di AppModule:
  declarations: [
    AppComponent,
    HighlightDirective,
 // HighlightDirective, //ERRATO
    ContactHighlightDirective //CORRETTO
    TitleComponent,
    AwesomePipe,
    ContactComponent,
  ],

Per poter effettuare un import associando un alias alla direttiva, bisognera' proseguire cosi':
import {
  HighlightDirective as ContactHighlightDirective //HighlightDirective verra' importata come ContactHighlightDirective
} from './contact/highlight.directive';

Per eliminare conflitti tra components e directives, crea un Modulo dedicato che isola le declarations in un Modulo dalle declarations in un altro.


5) GLi NgModules a differenza dei Components non hanno un loro scope proprio ed isolato, ma rendono il loro contenuto disponibile a tutta l'applicazione
   Per eliminare conflitti tra components e directives, crea un Modulo dedicato che isola le declarations in un Modulo dalle declarations in un altro.

6) IMPORTANTE: CREARE ED IMPORTARE UN NUOVO MODULO

   Il root module (AppModule) ed il feature module (nuovo modulo a parte) condividono lo stesso contesto di esecuzione. 
   Loro condividono gli stessi dependency injectors, il che significa che i services in un modulo sono disponibili anche a tutti gli altri moduli.
   Quindi un feature module collabora con il root module e con altri moduli attraverso i services che fornisce (provides) e/oppure tramite i components, directives, and pipes che condivide con gli altri moduli.

   Quando bisogna creare un feature Module:
   - se ho troppe classi importate nell'AppModule
   - se ci sono direttive in conflitto tra di loro (ad esempio perche' hanno lo stesso nome)
   - la mancanza di chiarezza nel ruolo di ogni componente rispetto le altre

   RAPPORTI TRA MODULI DIVERSI:
   - I Modules non ereditano l'accesso ai components, directives, o pipes che sono dichiarati in altri moduli. 
   - Cio' che viene importato da AppModule (componenti, direttive, pipes) e' irrilevante per gli altri moduli (es: ContactModule) e viceversa. 
   - Prima di usare [(ngModel)] in ContactComponent, ContactModule ovvero il suo modulo DEVE importare FormsModule.

  IMPORTO IL BrowserModule o il CommonModule?
  - BrowserModule da' errore se importato in un modulo che lo carica in maniera lazy (un modulo secondario).
  - Al suo posto va sempre importato CommonModule in tutti i moduli secondari 
  - CommonModule non deve essere importato nell'AppModule in quanto importa gia' il BrowserModule che contiene al suo interno il CommonModule

 7) IMPORTANTE: ROUTING DEI MODULI:
  - Al posto di importare tutti i moduli nell'array imports di AppModule, posso caricarli in maniera asincrona tramite il routing
  - Questo AppRoutingModule e' inteso solamente per l'app root module (AppModule).
  - MAI chiamare RouterModule.forRoot in un feature-routing-module (modulo aggiuntivo NON di root), ma bisogna SEMPRE usare il RouterModule.forChild..
  - SEMPRE chiamare RouterModule.forChild in un feature-routing module (modulo aggiuntivo).
  
 8) SHARED MODULE:
  - SharedModule hanno nella lista degli exports CommonModule e FormsModule cosi' i moduli che
    importeranno SharedModule otterranno CommonModule and FormsModule in automatico senza doversi importare singolarmente
    ogni volta i due moduli.
  - NON SI DEVE dichiarare (generalizzare) un app-wide singleton provider (servizio singleton globale nell'applicazione) 
    come ad esempio UserService in un shared module 
    Un lazy-loaded module che importa quel shared module al suo interno, creerà una copia di quel servizio,
    non gestendolo piu' come singleton nell'applicazione intera.

 9) CORE MODULE:
  - Il CoreModule deve contenere solamente i servizi che devono essere definiti una sola volta per tutta l'applicazione (singleton)
    Bisogna raccogliere le classi di cui si fa un single-use ed importarle in un unico CoreModule. 
    Un semplificato modulo di root (AppModule) importa CoreModule nella sua capacità come orchestratore dell'applicazione nel suo complesso.
    Nel core vanno messi i servizi da istanziare una volta per tutta l'applicazione (singleton)
    e componenti usati una volta sola come ad esempio gli Spinner e le Modali e il titolo dell'applicazione (main-title)
  - Solo AppModule deve importare il CoreModule
    
    CHECK DEI PARAMETRI DA INIETTARE:
    Esempio:
    constructor (@Optional() @SkipSelf() parentModule: CoreModule) {}
    Nell'esempio il parametro parentModule ha 2 annotation:
    - @Optional significa che il parametro è opzionale, quindi può essere non passato
    - @SkipSelf significa che se il parentModule è già stato iniettato da un injector a livello padre, questo NON verrà iniettato nel figlio in modo da non mandare in errore l'applicazione
