HTTP CLIENT:
 RxJs:
- Ci sono due modi principali per gestire una chiamata HTTP asincrona:
  Promise: il metodo .then() per risolvere una promise, ritorna a sua volta una promise
           in modo da gestire in maniera concatenata (chaining) più chiamate .then() e .catch(), ottenendo ogni volta nuove promise
  Observable: il metodo .subscribe() per risolvere (sottoscriversi ad un) Observable, non ritorna a sua volta un
              Observable, ma una Subscription, non permettendo di creare catene come con le promise, quindi non si possono
              più chiamare i metodi map() e subscribe() ancora
              Subscription is the end of the line for Observables. 
              The Subscription object has a different purpose, signified by its primary method, unsubscribe.
Subscription: è l'oggetto che viene tornato quando chiamiamo il metodo .subscribe() su un Observable, 
              ad una Subscription possiamo legare altre Subscriptions, oppure chiamare .unsubscribe() per
              annullare la sottoscrizione ad una particolare Observable
    Subject:  Un Subject è come un Observable, ma può multicast(are) a più Observers.
              Quindi dato un Subject, posso usare il metodo .subscribe()
              Subjects sono come gli EventEmitters: loro mantengono un registro di molti listeners.
              Ci sono anche diversi tipi specifici di Subject:
              - BehaviorSubject: BehaviorSubjects sono utili per rappresentare "valori che variano nel tempo". 
                Per definizione, un flusso di eventi compleanni è un Subject, 
                ma il flusso dell'età di una persona sarebbe un BehaviorSubject.
              - ReplaySubject: registra diversi valori dall'esecuzione dell'Observable e li replica per i nuovi subscribers.
              - AsyncSubject: AsyncSubject è una variante dove solamente l'ultimo valore dell'esecuzione dell'Observable è mandata ai suoi observers, 
                              e solo quando l'esecuzione è completata
   Scheduler: Uno Scheduler ti lascia definire in quale contesto di esecuzione 
              un Observable rilascerà notifiche al suo Observer.
              Uno Scheduler è una struttura dati.
              Uno Scheduler è un contesto di esecuzione: denota dove e quando il task dovrà essere eseguito (esempi: immediatamente, in callback, in setTimeout, ecc...)
              Uno Scheduler ha un orologio virtuale. Fornisce una nozione di tempo tramite il metodo .now() dello scheduler.
              I vari tipi di Scheduler sono:
              - null: se non si passa il tipo, le notifiche sono rilasciata in maniera sincrona e ricorsiva. Per operazioni costanti nel tempo.
              - queueScheduler	Schedula una coda nel corrente frame di eventi (trampoline scheduler). Per operazioni di iterazione.
              - asapScheduler	Schedula on the micro task queue, which is the same queue used for promises. Basically after the current job, but before the next job. Use this for asynchronous conversions.
              - asyncScheduler	Schedula lavori con setInterval. Per opersxioni basate sul tempo.
              - animationFrameScheduler	Schedula task che si verificheranno giusto appena varrà rigenerato il prossimo contenuto del browser. Per creare animazioni fluide del browser. 

IMPORTANTE: Sempre fare l'unsubscribe delle subscription ottenute dagli Observable nel ngOnDestroy dei corrispettivi @Component:
Se ci si trova in dubbio conviene effettuare l'unsubscribe ad ogni modo.
E' un'azione senza pericolo and mai una bad practice.

OPERATORI IN RxJs:
ESEMPIO UTILE CON SPIEGAZIONE:
   /*
   * @example
   *
   * import { map, filter, scan, tap } from 'rxjs/operators';
   * import { Observable, interval } from 'rxjs';
   * interval(1000)                     //ogni secondo genera un numero in successione 0,1,2,3,4, ecc...
   *   .pipe(                           //concatena una serie di operazioni per ogni valore emesso da interval
   *     filter(x => x % 2 === 0),      //filtro mantenenedo solo i numeri pari emessi fino ad ora da interval
   *     map(x => x + x),               //ciclo per ogni valore emesso da filter e restituisco il suo doppio
   *     scan((acc, x) => acc + x)      //ciclo per ogni valore emesso da map e resituisco la loro somma
   *   )
   *   .subscribe(x => console.log(x))  //stampa i risultati emessi 0,4,12,24,40, ecc...
   */

  // Interval: Emette valori ogni secondo in successione, quindi: 0, 1, 2, 3, ecc...

  // Pipe: Used to stitch together functional operators into a chain.
  // Pipe: Concatena una serie di operazioni in una catena unica consecutiva

  // Filter: Filtra (mantiene) le celle dell'array che rispecchiano la condizione

  // Map: Esegue le operazioni su ogni cella dell'array

  // Scan: Esegue l'operazione tra ogni cella dell'array e la successiva, emettendone il risultato e riutilizzandolo alla successiva iterazione

  // L'operatore tap precedentemente era chiamato do
  // Tap: Can perform side effects with observed data but doesnot modify the stream in any way.
  // Tap: Esegue operazioni con i dati, ma senza modificarne il contenuto nello stream a differenza di map