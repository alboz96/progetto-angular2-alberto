- Quando devo aggiungere un nuovo servizio al modulo, al posto di metterlo nell'array providers dell'app.module.ts 
  mi conviene metterlo nell'array providers del componente che lo andrà ad utilizzare per usare al meglio il lazy loading e ridurre errori
  IMPORTANTE: la differenza di mettere un servizio nell'array providers dell'AppModule o del Componente che lo userà è:
  1) Se aggiungi il service nell'array providers di AppModule, Angular creerà un singleton, un'istanza unica e condivisa in ogni classe che lo inietterà. 
  2) Se aggiungi il service nell'array providers del componente, Angular creerà un'istanza (scope) valida solo per quel componente, che non sarà condivisa con gli altri componenti 

- L'attributo novalidate nel tag <form> evita che il browser interpreti le validazioni HTML native

- Il data-model dei dati ricevuti dal server è distinto dal form-model che verrà popolato da esso e modificato succesivamente dall'utente

- Per gli input di tipo button specificare sempre sul tag button l'attributo type="button", perchè di default sarebbe di tipo "submit", 
  il quale può generare problemi con il form
- bisogna sempre delegare l'accesso ai dati del server ad una classe service di supporto ed usarla nel ngOnInit del componente per caricare i dati che provengono dal server da subito.

- differenza tra @ViewChild e @ContentChild:
  1) ViewChild permette di agganciare nel .ts del componente un elemento del DOM o componente presente nel suo .html (anche una reference variable)
  2) ContentChild permette di aggianciare nel .ts del componente un elemento del DOM o componente il quale sia stato specificato come contenuto all'interno del suo TAG html
- Il segno evidente della content projection prevede 2 cose:
  1) HTML all'interno dei TAG del componente che deve ospitare il template (quindi il contenuto).
  2) La presenza del tag ng-content all'interno del template del componente (.html).

  <ng-content></ng-content> //è usato per iniettare il contenuto tra i tag del componente figlio nel suo template dichiarato

ESEMPIO:
//template padre
  <app-figlio #pippo [testo]="testoFiglio" (cliccato)="onClickFiglio($event)" >
    <h1 titolo>sono il titolo</h1>
    <h3 footer>sono il footer</h3>
  </app-figlio>

//template figlio
<!-- Per iniettare il contenuto inserito tra i tag del componente figlio, prende come riferimento il content con l'attributo titolo (selettore)-->
<ng-content select="[titolo]"></ng-content>
<p (click)="pippo()">
  <!-- attributo in @Input passato dal padre-->
  {{testo}}
</p>
<!-- Per iniettare il contenuto inserito tra i tag del componente figlio, prende come riferimento il content con l'attributo footer (selettore)-->
<ng-content select="[footer]"></ng-content>
<h1>{{'sono nel figlio: '+ pS.testo}}</h1>
//prende il contenuto del tag compreso come contenuto nel tag del componente figlio, che ha come attributo titolo e lo sostituisce a ng-content
  
  
la proiezione
se abbiamo piu tipi di ng-content possiamo dividerli cosi:

classe css
select=".nomeClasse"

tag HTML
select="nome-tag"

attributo
select="[attributo]"



- RISOLVERE CONFLITTI CON DIRETTIVE CHE HANNO LO STESSO NOME:
    Se devo dichiarare 2 direttive con lo stesso nome nell'array declarations di AppModule:
    declarations: [
        AppComponent,
        HighlightDirective,
    // HighlightDirective, //ERRATO
        ContactHighlightDirective //CORRETTO
        TitleComponent,
        AwesomePipe,
        ContactComponent,
    ],
    Per poter effettuare un import associando un alias alla direttiva, bisognera' proseguire cosi':
    import {
    HighlightDirective as ContactHighlightDirective //HighlightDirective verra' importata come ContactHighlightDirective
    } from './contact/highlight.directive';

   Per eliminare conflitti tra components e directives, crea un Modulo dedicato che isola le declarations in un Modulo dalle declarations in un altro.

- GLi NgModules a differenza dei Components non hanno un loro scope proprio ed isolato, ma rendono il loro contenuto disponibile a tutta l'applicazione
  Per eliminare conflitti tra components e directives, crea un Modulo dedicato che isola le declarations in un Modulo dalle declarations in un altro.
  Il root module (AppModule) ed il feature module (nuovo modulo a parte) condividono lo stesso contesto di esecuzione. 
  IMPORTANTE: Loro condividono gli stessi dependency injectors, il che significa che i services in un modulo sono disponibili anche a tutti gli altri moduli.
  Quindi un feature module collabora con il root module e con altri moduli attraverso i services che fornisce (provides) e/oppure tramite i components, directives, and pipes che condivide (esporta) con gli altri moduli.
- IMPORTANTE:
  I Modules non ereditano l'accesso ai components, directives, o pipes che sono dichiarati in altri moduli. 
  Cio' che viene importato da AppModule (componenti, direttive, pipes) e' irrilevante per gli altri moduli (es: ContactModule) e viceversa. 
  Prima di usare [(ngModel)] in ContactComponent, ContactModule ovvero il suo modulo DEVE importare FormsModule.
  
  IMPORTO IL BrowserModule o il CommonModule?
  - BrowserModule da' errore se importato in un modulo che lo carica in maniera lazy (un modulo secondario).
  - Al suo posto va sempre importato CommonModule in tutti i moduli secondari 
  - CommonModule non deve essere importato nell'AppModule in quanto importa gia' il BrowserModule che contiene al suo interno il CommonModule

  ROUTING DEI MODULI:
  - Al posto di importare tutti i moduli nell'array imports di AppModule, posso caricarli in maniera asincrona tramite il routing
  - Questo AppRoutingModule e' inteso solamente per l'app root module (AppModule).
  - MAI chiamare RouterModule.forRoot in un feature-routing-module (modulo aggiuntivo NON di root), ma bisogna SEMPRE usare il RouterModule.forChild.
  - SEMPRE chiamare RouterModule.forChild in un feature-routing module (modulo aggiuntivo).

  SHARED MODULE:
  - SharedModule hanno nella lista degli exports CommonModule e FormsModule cosi' i moduli che
    importeranno SharedModule otterranno CommonModule and FormsModule in automatico senza doversi importare singolarmente
    ogni volta i due moduli.
  - NON SI DEVE dichiarare (generalizzare) un app-wide singleton provider (servizio singleton globale nell'applicazione) 
    come ad esempio UserService in un shared module 
    Un lazy-loaded module che importa quel shared module al suo interno, creerà una copia di quel servizio,
    non gestendolo piu' come singleton nell'applicazione intera.

    CORE MODULE:
  - Il CoreModule deve contenere solamente i servizi che devono essere definiti una sola volta per tutta l'applicazione (singleton)
    Bisogna raccogliere le classi di cui si fa un single-use ed importarle in un unico CoreModule. 
    Un semplificato modulo di root (AppModule) importa CoreModule nella sua capacità come orchestratore dell'applicazione nel suo complesso.
    Nel core vanno messi i servizi da istanziare una volta per tutta l'applicazione (singleton)
    e componenti usati una volta sola come ad esempio gli Spinner e le Modali e il titolo dell'applicazione (main-title)
  - Solo AppModule deve importare il CoreModule
  
    CHECK DEI PARAMETRI DA INIETTARE:
    Esempio:
    constructor (@Optional() @SkipSelf() parentModule: CoreModule) {}
    Nell'esempio il parametro parentModule ha 2 annotation:
    - @Optional significa che il parametro è opzionale, quindi può essere non passato
    - @SkipSelf significa che se il parentModule è già stato iniettato da un injector a livello padre, questo NON verrà iniettato nel figlio in modo da non mandare in errore l'applicazione



proseguo da => Routing e Navigation
Adding animations to the routed compone