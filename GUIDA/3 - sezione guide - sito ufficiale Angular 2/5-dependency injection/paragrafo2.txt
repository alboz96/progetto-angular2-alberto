DETTAGLIO ESEMPIO GUIDA-9-1:
-NON SI USA IL FACTORY PATTERN IN ANGULAR 2 (E' ERRATO)

-ESEMPIO DI UN MODEL CON DEPENDENCY INJECTION:
import { Injectable } from '@angular/core';

export class Engine {
  public cylinders = 4;
}

export class Tires {
  public make  = 'Flintstone';
  public model = 'Square';
}

@Injectable()
export class Car {
  public description = 'DI';

  constructor(public engine: Engine, public tires: Tires) { }

  // Method using the engine and tires
  drive() {
    return `${this.description} car with ` +
      `${this.engine.cylinders} cylinders and ${this.tires.make} tires.`;
  }
}

-COMPONENTE CON DEPENDENCY INJECTION DEL MODEL:
@Component({
  selector: 'my-car',
  template: `
  <h2>Cars</h2>
  <div id="di">{{car.drive()}}</div>
  <div id="nodi">{{noDiCar.drive()}}</div>
  <div id="injector">{{injectorCar.drive()}}</div>
  <div id="factory">{{factoryCar.drive()}}</div>
  <div id="simple">{{simpleCar.drive()}}</div>
  <div id="super">{{superCar.drive()}}</div>
  <div id="test">{{testCar.drive()}}</div>
  `,
  providers: [Car, Engine, Tires]
})
export class CarComponent {
  factoryCar  = (new CarFactory).createCar();
  injectorCar = useInjector(); //INJECTION TIPO 1
  noDiCar     = new CarNoDi; //SENZA DEPENDENCY INJECTION
  simpleCar   = simpleCar(); //INJECTION TIPO 2
  superCar    = superCar();
  testCar     = testCar();

  constructor(public car: Car) {}
}

-INJECTION TIPO 1 (con ReflectiveInjector), usando la classe Car soprastante:
export function useInjector() {
  let injector: ReflectiveInjector;
  /*
  // Cannot instantiate an ReflectiveInjector like this!
  let injector = new ReflectiveInjector([Car, Engine, Tires]); //NON DEVO CREARE UN'ISTANZA
  */
  injector = ReflectiveInjector.resolveAndCreate([Car, Engine, Tires]);
  let car = injector.get(Car);
  car.description = 'Injector';
  return car;
}

-INJECTION TIPO 2 (la pi√π semplice):
export function simpleCar() {
  let car = new Car(new Engine(), new Tires());
  return car;
}

-INJECTION TIPO 3 (con injector):
@Component({
  selector: 'my-injectors',
  template: `
  <h2>Other Injections</h2>
  <div id="car">{{car.drive()}}</div>
  <div id="hero">{{hero.name}}</div>
  <div id="rodent">{{rodent}}</div>
  `,
  providers: [Car, Engine, Tires, heroServiceProvider, Logger]
})
export class InjectorComponent {
  car: Car = this.injector.get(Car);

  heroService: HeroService = this.injector.get(HeroService);
  hero: Hero = this.heroService.getHeroes()[0];

  constructor(private injector: Injector) { }

  get rodent() {
    let rousDontExist = `R.O.U.S.'s? I don't think they exist!`;
    return this.injector.get(ROUS, rousDontExist);
  }
}