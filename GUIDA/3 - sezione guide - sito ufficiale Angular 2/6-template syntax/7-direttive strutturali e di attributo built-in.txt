//INFORMAZIONI PER OGNI DIRETTIVA
-il tag html su cui è applicata la direttiva è detto host
-si può applicare solo una direttiva strutturale su un elemento HTML: 
Per esempio: devi ripetere tante volte un blocco, ma solo quando si verifica una condizione particolare.
Se proverai a mettere entrambi *ngFor e *ngIf sullo stesso elemento host, si verificherà un errore.
  
(quando devo usare 2 direttive strutturali sullo stesso tag, esempio *ngFor e *ngIf)
-use <ng-container> Per raggruppare elementi quando non è presente un elemento host per la direttiva da applicare
OPPURE
<ng-tempalte> (solo se sul tag viene usata una direttiva strutturale) 
ESEMPIO:
<p>Hop!</p>
<ng-template>
  <p>Hip!</p>
</ng-template>
<p>Hooray!</p>
Questo codice stamperà solo  Hop! Hooray!
Perchè se non sono presenti direttive strutturali, ma vengono solo wrappati gli elementi HTML dentro un tag <ng-template>, quegli elementi scompariranno, come <p>Hip!</p> nell'esempio

//DIRETTIVE STRUTTURALI
*ngIf:
-(cancella elementi DOM), ESEMPIO:
<app-hero-detail *ngIf="isActive"></app-hero-detail>
-*ngFor:
<div *ngFor="let hero of heroes">{{hero.name}}</div>
//Prende ogni elemento hero nell'array heroes, e lo salva in una variabile locale del ciclo hero, e la rende disponibile nel template HTML per ogni iterazione.
<app-hero-detail *ngFor="let hero of heroes" [hero]="hero"></app-hero-detail>
//Angular traduce questa istruzione come un <ng-template> intorno all'elemento host, 
//Poi usa questo template ripetutamente per create un insieme di elementi e bindarli per ogni elemento nella lista.
//La keyword let crea una variabile lato template che viene passata in input tramite [hero]
//ESEMPIO *ngFor SINTASSI COMPLETA
<div *ngFor="let hero of heroes| async; let i=index; let f=first; let l=last; let e=even; let o=odd">{{i + 1}} - {{hero.name}}</div>
//Quando un item è aggiunto, una nuova istanza del template è aggiunta al DOM.
//Quando un item è rimosso, la sua istanza template è rimossa dal DOM.
//Quando gli items sono riordinati, i loro rispettivi template sono riordinati nel DOM.
//Altrimenti, l'elemento del DOM per quell'item rimarrà lo stesso.

//DIRETTIVE DI ATTRIBUTO
//ng-click
<button (click)="onSave()">Save</button>

//ng-show
<span [hidden]="isUnchanged">changed</span>

//ng-class (applica una classe o un array di classi css)
----------------------------------------------------------------------------------------------------
<div [ngClass]="class">[ngClass] binding to the class property</div>
<div [ngClass]="['someClass1', 'someClass2']">[ngClass] binding to the classes array property</div>
per applicare una singola classe css (special) in maniera dinamica (on-off)
<div [class.special]="isSpecial">Special</div>
//se si vuole associare la classe applicata ad una variabile
[class]="nomeVariabile">...</div>
----------------------------------------------------------------------------------------------------
//ESEMPIO PER APPLICARE PIU' CLASSI CSS con ng-class
//file .ts
currentClasses: {};
setCurrentClasses() {
  // CSS classes: added/removed per current state of component properties
  this.currentClasses =  {
    'saveable': this.canSave,
    'modified': !this.isUnchanged,
    'special':  this.isSpecial
  };
}
//file .html
<div [ngClass]="currentClasses">This div is initially saveable, unchanged, and special</div>
------------------------------------------------------------------------------------------------------

//ng-style 
------------------------------------------------------------------------------
per applicare un singolo stile (color) css in maniera dinamica
<button [style.color]="isSpecial ? 'red' : 'green'">
//per specificare anche le unità di misura
<div [style.font-size]="isSpecial ? 'x-large' : 'smaller'" > text </div>
<button [style.font-size.em]="isSpecial ? 3 : 1" >Big</button>
<button [style.font-size.%]="!isSpecial ? 150 : 50" >Small</button>
//le proprietà di style possono essere scritte sia in dash-case sia in camelCase e specificando l'unita' di misura (esempio em e %)
//esempio con font-size e fontSize
------------------------------------------------------------------------------
//ESEMPIO PER APPLICARE PIU' STILI CSS con ng-style
//file .ts
currentStyles: {};
setCurrentStyles() {
  // CSS styles: set per current state of component properties
  this.currentStyles = {
    'font-style':  this.canSave      ? 'italic' : 'normal',
    'font-weight': !this.isUnchanged ? 'bold'   : 'normal',
    'font-size':   this.isSpecial    ? '24px'   : '12px'
  };
}
//file .html
<div [ngStyle]="currentStyles">
  This div is initially italic, normal weight, and extra large (24px).
</div>
------------------------------------------------------------------------------