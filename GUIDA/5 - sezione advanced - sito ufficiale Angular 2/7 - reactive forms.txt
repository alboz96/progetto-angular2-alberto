- Puoi creare e manipolare gli oggetti form control direttamente nella classe del componente.
  Il componente può accedere e gestire il contenuto dei form control ed il data model associato ad esso.
  Il componente può osservare le modifiche del form e reagire di conseguenza
- Uno dei vantaggi principali è che i cambiamenti all'interno del form sono di tipo sincrono
  I template form sono asincroni, i reactive form sono sincroni, quindi facilmente gestibili tramite eventi e testabili con unit test (senza dover usare la funzione fakeAsync)
- La direttiva ngModel non è parte del ReactiveFormsModule, ma del FormsModule perchè è il mezzo sul quale funziona il Template Form 
- I template form delegano la creazione dei controlli del form alle direttive
  E per evitare gli errori "value changed after checked", queste direttive utilizzano più di un ciclo per creare l'intera alberatura di controlli.
  Quindi per queste motivazioni si deve attendere un istante prima che le istruzioni dello sviluppatore avvengano in seguito al cambiamento dei valori del form
  IMPORTANTE!!!: Nel caso lo sviluppatore inietti dal template al .ts una @ViewChild(NgForm) e decida di ispezionarne
  il valore cambiato tramite il lifecycle hook ngAfterViewInit, scoprirà che questo form non ha proprietà figlie.
  Questo perchè dovrebbe aspettare un istante, usando setTimeout, prima di estrarre il valore da una proprietà form control,
  testare la sua validità, leggerne o settarne un nuovo valore.
  Questo evidenzia i vantaggi di un ReactiveForm
- NgForm è la classe che gestisce il form nella sua interezza  
- AbstractControl è la classe astratta di base per 3 classi del controllo del form: FormControl, FormGroup, and FormArray. 
  Questa fornisce le loro proprietà e comportamenti comuni, alcuni dei quali sono observable.
- FormArray traccia il valore e la validità un array indicizzato numericamente di istanze AbstractControl (FormControl, FormGroup o FormArray).
- FormGroup è una classe che gestisce una sezione (gruppo di un form), associando ogni campo del form al gruppo tramite la direttiva formControlName 
  L'attributo (direttiva) formControlName, quindi, permette di associare il nome del campo al form come fa la direttiva formControl
  Mentre FormGroup traccia il valore e la validità di un gruppo di istanze AbstractControl (FormControl, FormGroup o FormArray) ed è il contenitore principale del form
- FormControl è una classe che gestisce il valore e la validità un singolo campo del form 
- FormControl NON è da confondere con la classe CSS di Bootstrap form-control
- FormGroup   NON è da confondere con la classe CSS di Bootstrap form-group
- Il costruttore FormControl accetta 3 argomenti opzionali: il valore iniziale del dato, un array di validatori, e un array di validatori asincroni.

ESEMPI PER DISTINGUERE formControl e formControlName:
<div>
  <input type="text" [formControl]="myForm.controls.firstName"/>
  <input type="text" [formControl]="myForm.controls.lastName"/>
  <input type="text" [formControl]="myForm.controls.email"/>
  <input type="text" [formControl]="myForm.controls.title"/>
</div>

E' equivalente a:
<div [formGroup]="myForm">
  <input type="text" formControlName="firstName"/>
  <input type="text" formControlName="lastName"/>
  <input type="text" formControlName="email"/>
  <input type="text" formControlName="title"/>
</div>

- FormGroup è potente quando bisogna gestire form complessi, in quanto consente di annidare più gruppi (FormGroup)
- FormBuilder è un servizio (provider) da iniettare nel costruttore per semplificare la creazione/gestione del form
  FormBuilder.group è un metodo factory che crea un oggetto FormGroup.   
  FormBuilder.group prende come parametro un oggetto le cui chiavi e valori sono nomi e definizioni dei FormControl
  è meglio specificare un formGroup che tanti formControl 
- Il formGroup ha come proprietà principali .value (valore in formato JSON del form) e .status (stato delle validazioni del form)

  ESEMPIO per un campo name all'interno di un formGroup:
  this.heroForm = this.fb.group({
  name: ['', Validators.required ],
  });
- Il campo name è inizialmente settato come ''
  Ha il Validators.required per renderlo obbligatorio (Validators appartiene sempre a @angular/forms)

  ESEMPIO per ottenere le proprietà formControl all'interno di un formGroup:
  heroForm.get('name').value            //(per property singola)
  heroForm.get('address.street').value  //(per property annidata)

- formGroup.setValue controlla l'oggetto dati prima di assegnarlo ai valori dei vari form controls da settare
  Ed in caso di errore restituisce un errore a runtime
- formGroup.patchValue funziona come il setValue, ma a sua differenza fallisce silenziosamente senza dare errori
- formGroup.setControl a differenza del setValue che imposta solo il valore, setControl setta tutti i parametri del formControl
